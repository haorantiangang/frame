package com.android.lxf.toolsutil;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.provider.Settings;
import android.telephony.TelephonyManager;

import java.io.UnsupportedEncodingException;
import java.util.UUID;

/**
 * Created by lxf(1173074500@qq.com) on 2015/7/16.
 * Project: beeper_customer
 * introduction:应用全局相关工具类
 */
public class AppUtils {

	/**
	 * 应用级Context对象，无Window
	 *
	 * @return
	 */
	public static Context getContext() {
		return UtilsInitializer.mContext;
	}

	/**
	 * 主线程id
	 *
	 * @return
	 */
	public static int getMainThreadId() {
		return UtilsInitializer.mMainThreadId;
	}

	/**
	 * 获取一个主线程Handler实例，用于post
	 *
	 * @return
	 */
	public static Handler getMainThreadHandler() {
		return UtilsInitializer.mMainThreadHandler;
	}

	/**
	 * 获取系统资源
	 * @return
	 */
	public static Resources getResources() {
		return UtilsInitializer.mResources;
	}

	/**
	 * 主线程looper
	 *
	 * @return
	 */
	public static Looper getMainLooper() {
		return UtilsInitializer.mMainLooper;
	}
	public static final String ANDROID = "Android";

	public static String getVersionCode() {
		PackageManager manager = getContext().getPackageManager();
		PackageInfo info = null;
		try {
			info = manager.getPackageInfo(getContext().getPackageName(), 0);
		} catch (PackageManager.NameNotFoundException e) {
			e.printStackTrace();
		}
		return String.valueOf(info.versionCode);
	}

	public static String getVersionName() {
		PackageManager manager = getContext().getPackageManager();
		PackageInfo info = null;
		try {
			info = manager.getPackageInfo(getContext().getPackageName(), 0);
		} catch (PackageManager.NameNotFoundException e) {
			return "";
		}
		return String.valueOf(info.versionName);
	}

	protected static final String PREFS_FILE = "device_id.xml";
	protected static final String PREFS_DEVICE_ID = "device_id";
	protected static volatile UUID uuid;
	private static int mFromWhich;
	public static final int From_ANDROID_ID = 1;
	public static final int FROM_IMEI = 2;
	public static final int FROM_UUID = 3;

	/**
	 * Returns a unique UUID for the current android device. As with all UUIDs,
	 * this unique ID is "very highly likely" to be unique across all Android
	 * devices. Much more so than ANDROID_ID is.
	 * <p/>
	 * The UUID is generated by using ANDROID_ID as the base key if appropriate,
	 * falling back on TelephonyManager.getDeviceID() if ANDROID_ID is known to
	 * be incorrect, and finally falling back on a random UUID that's persisted
	 * to SharedPreferences if getDeviceID() does not return a usable value.
	 * <p/>
	 * In some rare circumstances, this ID may change. In particular, if the
	 * device is factory reset a new device ID may be generated. In addition, if
	 * a user upgrades their phone from certain buggy implementations of Android
	 * 2.2 to a newer, non-buggy version of Android, the device ID may change.
	 * Or, if a user uninstalls your app on a device that has neither a proper
	 * Android ID nor a Device ID, this ID may change on reinstallation.
	 * <p/>
	 * Note that if the code falls back on using TelephonyManager.getDeviceId(),
	 * the resulting ID will NOT change after a factory reset. Something to be
	 * aware of.
	 * <p/>
	 * Works around a bug in Android 2.2 for many devices when using ANDROID_ID
	 * directly.
	 *
	 * @return a UUID that may be used to uniquely identify your device for most
	 * purposes.
	 */
	public static UUID getDeviceId() {
		Context context = getContext();
		if (uuid == null) {
			synchronized (AppUtils.class) {
				if (uuid == null) {
					final SharedPreferences prefs = context
							.getSharedPreferences(PREFS_FILE, 0);
					final String id = prefs.getString(PREFS_DEVICE_ID, null);
					if (id != null) {
						uuid = UUID.fromString(id);
					} else {
						final String deviceId = ((TelephonyManager) context
								.getSystemService(Context.TELEPHONY_SERVICE))
								.getDeviceId();
						try {
							if (deviceId != null) {
								uuid = UUID.nameUUIDFromBytes(deviceId
										.getBytes("utf8"));
								mFromWhich = FROM_IMEI;
							} else {
								final String androidId = Settings.Secure.getString(
										context.getContentResolver(),
										Settings.Secure.ANDROID_ID);
								if (!"9774d56d682e549c".equals(androidId)) {
									uuid = UUID.nameUUIDFromBytes(androidId
											.getBytes("utf8"));
									mFromWhich = From_ANDROID_ID;
								} else {
									uuid = UUID.randomUUID();
									mFromWhich = FROM_UUID;
								}
							}
						} catch (UnsupportedEncodingException e) {
							throw new RuntimeException(e);
						}
						prefs.edit()
								.putString(PREFS_DEVICE_ID, uuid.toString())
								.commit();
					}
				}
			}
		}
		return uuid;
	}

	public static int getDeviceIdFromWhich() {
		return mFromWhich;
	}

	/**
	 * 返回"Android"
	 *
	 * @return
	 * @see AppUtils#ANDROID
	 */
	public static String getOsName() {
		return ANDROID;
	}

	/**
	 * Build.VERSION.RELEASE
	 *
	 * @return
	 */
	public static String getOsVersion() {
		return String.valueOf(Build.VERSION.RELEASE);
	}

	/**
	 * Build.MODEL + ":" + Build.PRODUCT
	 *
	 * @return
	 */
	public static String getPhoneModel() {
		return Build.MODEL + ":" + Build.PRODUCT;
	}

	public static String getDevToken() {
		return getDeviceId().toString();
	}

	private static String mUser = null;

	/**
	 * 返回手机用户名 用手机号+imsi 或者getPhoneModel()做标识 如果都拿不到就是admin
	 * @return
	 */
//	public static String getUserPhoneName() {
//		String telTag = "tel:";
//		String imsiTag = "-imsi:";
//		try {
//			if (StringUtils.isEmpty(mUser)) {
//				TelephonyManager tm = (TelephonyManager) getContext().getSystemService(Context.TELEPHONY_SERVICE);
//				String tel = tm.getLine1Number();//获取本机号码
//				String imsi = tm.getSubscriberId();//得到用户Id
//				mUser = telTag + tel + imsiTag + imsi;
//			}
//		} catch (Exception e) {
//			e.printStackTrace();
//		} finally {
//			if (StringUtils.isEmpty(mUser)) {
////			if (StringUtils.isEmpty(mUser.replace(telTag, "").replace(imsiTag, "").replace("null", ""))) {
//				String phoneModel = getPhoneModel();
//				mUser = phoneModel != null ?phoneModel : "admin";
//			}
//			return mUser;
//		}
//	}

	/**
	 * 获取manifest中定义的meta data
	 * @return
	 */
	public static Bundle getMeta() {
		try {
			return getContext().getPackageManager()
					.getApplicationInfo(getContext().getPackageName(),
							PackageManager.GET_META_DATA).metaData;
		} catch (PackageManager.NameNotFoundException e) {
			return null;
		}
	}

}